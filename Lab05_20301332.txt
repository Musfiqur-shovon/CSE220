# Name:     MD. MUSFIQUR RAHMAN SHOVON
# ID:       20301332
# SECTION:  07

    # ------------TASK NO 01------------

# PART  (a)
def fact(n):
    if n == 1:
        return 1
    else:
        return n * fact(n-1)

print(fact(3))

# PART  (b)
def fibonacci_series(n):
   if n <= 1:
       return n
   else:
       return(fibonacci_series(n-1) + fibonacci_series(n-2))
user = int(input())
for i in range(0, user):
        print(fibonacci_series(i))

# PART  (c)
def array_element(array,count=0):
    if len(array) == count:
        return
    else:
        print(array[count])
        array_element(array,count+1)

list = [10,20,30,40,50]
array_element(list)

# PART  (d)
def power_function(number,power):
    if power == 0:
        return 1
    else:
        return number * power_function(number,power-1)

print(power_function(3,3))

    # ------------TASK NO 02------------

# PART  (a)
def binary(number,s=""):
    if number == 0:
        print(s)
    else:
        bin =  number%2
        s = str(bin) + s
        binary(number//2,s)

binary(int(input()))

# PART  (b)
class Node:
    def __init__(self,value):
        self.value = value
        self.next = None

class MyList:
    def __init__(self):
        self.head = None
        self.tail = None

    def add(self,val):
         node = Node(val)
         if self.head == None:
             self.head = node
             self.tail = node
         else:
             self.tail.next = node
             self.tail = node


# PART  (c)
    def reverse(self):
        node = self.head
        if self.head == self.tail:
            print(self.head.value)
            return
        else:
            while node.next.next != None:
                node = node.next
            print(node.next.value)
            self.tail = node
            node.next = None
            self.reverse()


# Tester
list = [10,20,30,40,50]
a = MyList()
for i in list:
    a.add(i)
a.reverse()
    # ------------TASK NO 03------------

def hocBuilder(height):
    if height <= 0:
        return
    if height == 1:
        return 8
    else:
        return 5 + hocBuilder(height-1)

print(hocBuilder(3))

    # ------------TASK NO 04------------

# PART  (a)
def pattern(number,count = 1):
    if count == number+1:
        return
    else:
        for i in range(1,count+1):
            print(i,end=" ")
        print()
        pattern(number,count+1)

pattern(5)

# PART  (b)
def pattern_with_gap(number, count=1):
    if count == number + 1:
        return
    else:
        print(" " * (number - count), end="")
        for i in range(1, count + 1):
            print(i, end="")
        print()
        pattern_with_gap(number, count + 1)

pattern_with_gap(5)

    # ------------TASK NO 05------------

class FinalQ:
    def print(self, array, idx):
        if (idx < len(array)):
            profit = self.calcProfit(array[idx])
            print(f"{idx+1}. Investment: {array[idx]}; Profit: {profit}")
            self.print(array,idx+1)

    def calcProfit(self,investment):
        profit = 0
        investment = investment - 25000
        if investment >= 75000:
            profit = 75000 * (4.5 / 100)
            investment = investment - 75000
        else:
            profit = investment * (4.5 / 100)
            investment = 0
        profit = investment * (8 / 100) + profit
        return profit

# Tester
array = [25000, 100000, 250000, 350000]
f = FinalQ()
f.print(array, 0)