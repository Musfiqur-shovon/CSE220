# 1.  Shift Left k Cells
source = [10,20,30,40,50,60]
def shiftLeft(source,k):
    for i in range(len(source)):
        if (i+k<len(source)):
            source[i] = source[i+k]
        else:
            source[i] = 0
    print(source)
shiftLeft(source,3)


# 2.  Rotate Left k cells
source = [10,20,30,40,50,60]
def rotateLeft(source,k):
    for i in range(len(source)):
        if (i+k<len(source)):
            j = source[i]
            source[i] = source[i + k]
            source[i + k] = j
    print(source)
rotateLeft(source,3)


# 3. Remove an element from an array
source=[10,20,30,40,50,0,0]
def remove(source,size,index):
    i = index
    while(i<size):
        source[i] = source[i+1]
        i+=1
    print(source)
remove(source,5,2)


# 4. Remove all occurrences of a particular element from an array
def removeAll(source,size,element):
    i = 0
    while(i<size):
        if source[i] == element:
            for j in range(i,size):
                if j != (size-1):
                    source[j] = source[j+1]
                else:
                    source[j] = 0
            size = size - 1
        else:
            i = i + 1
    return source

# Test Case
source = [10,2,30,2,50,2,2,60,0,0]
print(removeAll(source,8,2))


# 5. Splitting_an_Array
#test case
arr_1 = [1,1,1,2,1]
arr_2 = [2, 1, 1, 2, 1]
arr_3 = [10, 3, 10, 2, 1]

#code here
def splitting_an_array(arr):
    sum = 0
    for i in arr:
        sum = sum + i

    partial_sum = 0
    for count in arr:
        partial_sum = partial_sum +  count
        if (partial_sum*2==sum):
            return "true"
    return "false"
# output method
print(splitting_an_array(arr_1))
print(splitting_an_array(arr_2))
print(splitting_an_array(arr_3))


# 6. Array series
def Array_Series(n):
    arr = [0]*n*n
    index = 0
    count = n
    index_count = 1
    result_set = {}
    for i in range(0 , n+1):
        for j in range(1, count+1):
            arr[index] = j
            index = index + 1
        if(count<n):
            for j in range(0,n-count):
                if index == n*n:
                    break
                arr[index] = 0
                index = index + 1
        if index_count < n:
            index_count = index_count + 1
            arr[index-1] = f"   {arr[index-1]}"
        count = count - 1
    arr.reverse()
    return arr

print(Array_Series(4))


# 7. Max Bunch Count
input_1 = [1, 2, 2, 3, 4, 4, 4]
input_2 = [1,1,2, 2, 1, 1,1,1]
    # Function
def Max_Bunch_Count(arr):
    c = 0
    highest = 1
    for i in range(len(arr)):
        if arr[i] == arr[i-1]:
            c = c + 1
        else:
            c = 1
        if highest < c:
            highest = c
    print(highest)
    # Output method
Max_Bunch_Count(input_1)
Max_Bunch_Count(input_2)


# 8. Repetition 
input_1 =  [4,5,6,6,4,3,6,4]
input_2 =  [3,4,6,3,4,7,4,6,8,6,6]
def repetition(arr):
    count = {}
    for item in arr:
        if item not in count:
            if arr.count(item) > 1:
                count[item] = arr.count(item)
    sum = 0
    c = 0
    for s in count.values():
        sum += s
        c += 1
    avg = sum / c
    for match in count.values():
        if match == avg:
            return True
        else:
            return False

print(repetition(input_1))
print(repetition(input_2))



        # Circular Array



# 1. Palindrome
def Palindrome(arr,start,size):
    # circular array to linear array
    linear_arr = []
    index = start
    i = 0
    while (i<size):
        linear_arr.append(arr[index])
        index = (index+1)%len(arr)
        i += 1

    # palindrome check for linear array
    i = 0
    k = len(linear_arr) - 1
    count = 0
    formula = len(linear_arr) // 2
    while (i < formula):
        if linear_arr[i] == linear_arr[k]:
            i += 1
            k -= 1
            count += 1
        else:
            i += 1
            k -= 1

    if count == formula:
        return True
    else:
        return False

# Code check
arr_1 = [20,10,0,0,0,10,20,30]
arr_2 = [10,20,0,0,0,10,20,30]
print(Palindrome(arr_1,5,5))
print(Palindrome(arr_2,5,5))



# 2. Intersection 
def Intersection(cir_arr_1,start_1,size_1,cir_arr_2,start_2,size_2):
    i = 0
    index_1 = start_1
    result = []
    # loop for intersection
    while (i<size_1):
        j = 0
        index_2 = start_2
        while (j < size_2):
            if(cir_arr_1[index_1]==cir_arr_2[index_2]):
                result.append(cir_arr_1[index_1])
            index_2 = (index_2 + 1) % len(cir_arr_2)
            j += 1
        index_1 = (index_1+1)%len(cir_arr_1)
        i += 1
    print(result)
# test case 
c_arr_1 =  [40,50,0,0,0,10,20,30]
c_arr_2 = [10,20,5,0,0,0,0,0,5,40,15,25]
Intersection(c_arr_1,5,5,c_arr_2,8,7)



# 3. Musical Chair game
import random
# Function for chair rotation
def rotate_chair(list):
    temp = list[0]
    for i in range(0,len(list)):
        if (i == len(list)-1):
            list[i] = temp
        else:
            list[i] = list[i+1]
    return list
# function for select the winner
def musical_chair_game(list):
    loop = True
    while (loop == True):
        if len(list) == 1:
            print()
            print("-----GAME OVER-----")
            print("Name of the Winner:","Participant",list[0])
            loop = False
        else:
            random_number = random.randint(0, 3)
            rotate_chair(list)
            if random_number == 1:
                eleminate = len(list) // 2
                print("Stop Music")
                print("Eliminate Participant No.:",list[eleminate])
                list.pop(eleminate)

# participants_list is used for mentioning the participants
participants_list_as_number = [1,2,3,4,5,6,7]
participants_list_as_name = ["Mita","Hia","Keya","Pushpita"]
print("Game 01")
musical_chair_game(participants_list_as_number)
print("Game 02")
musical_chair_game(participants_list_as_name)